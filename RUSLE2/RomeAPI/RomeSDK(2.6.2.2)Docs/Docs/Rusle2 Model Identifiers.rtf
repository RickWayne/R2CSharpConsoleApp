{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman{\*\falt Times};}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial{\*\falt Helvetica};}{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f36\froman\fcharset238\fprq2 Times New Roman CE{\*\falt Times};}
{\f37\froman\fcharset204\fprq2 Times New Roman Cyr{\*\falt Times};}{\f39\froman\fcharset161\fprq2 Times New Roman Greek{\*\falt Times};}{\f40\froman\fcharset162\fprq2 Times New Roman Tur{\*\falt Times};}
{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew){\*\falt Times};}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic){\*\falt Times};}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic{\*\falt Times};}
{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese){\*\falt Times};}{\f46\fswiss\fcharset238\fprq2 Arial CE{\*\falt Helvetica};}{\f47\fswiss\fcharset204\fprq2 Arial Cyr{\*\falt Helvetica};}
{\f49\fswiss\fcharset161\fprq2 Arial Greek{\*\falt Helvetica};}{\f50\fswiss\fcharset162\fprq2 Arial Tur{\*\falt Helvetica};}{\f51\fswiss\fcharset177\fprq2 Arial (Hebrew){\*\falt Helvetica};}
{\f52\fswiss\fcharset178\fprq2 Arial (Arabic){\*\falt Helvetica};}{\f53\fswiss\fcharset186\fprq2 Arial Baltic{\*\falt Helvetica};}{\f54\fswiss\fcharset163\fprq2 Arial (Vietnamese){\*\falt Helvetica};}{\f56\fmodern\fcharset238\fprq1 Courier New CE;}
{\f57\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f59\fmodern\fcharset161\fprq1 Courier New Greek;}{\f60\fmodern\fcharset162\fprq1 Courier New Tur;}{\f61\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f62\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f63\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f64\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden 
Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\s15\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 \styrsid3562630 Plain Text;}}{\*\rsidtbl \rsid1074758\rsid1261184\rsid1340913\rsid2191647\rsid2573873\rsid3021802\rsid3429757\rsid3562630\rsid3881954\rsid4001133\rsid4614168
\rsid4791106\rsid5587536\rsid5833490\rsid6971223\rsid7294165\rsid7880159\rsid8085238\rsid8401305\rsid8401655\rsid8875266\rsid9201890\rsid10710486\rsid11800917\rsid11823710\rsid12009862\rsid12082065\rsid12275664\rsid12327537\rsid12388335\rsid12728674
\rsid13401146\rsid13446270\rsid13831412\rsid14041217\rsid15139887\rsid15935938\rsid16064700}{\*\generator Microsoft Word 10.0.6754;}{\info{\title Rusle2 Model Identifiers}{\author James P. Lyon}{\operator James P. Lyon}
{\creatim\yr2005\mo7\dy13\hr17\min38}{\revtim\yr2006\mo2\dy14\hr17\min48}{\version28}{\edmins271}{\nofpages5}{\nofwords1601}{\nofchars9131}{\*\company University of Tennessee}{\nofcharsws10711}{\vern16391}}\margl720\margr720 
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1701\dgvorigin1984\dghshow1\dgvshow1
\jexpand\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct\asianbrkrule\rsidroot11823710 \fet0\sectd 
\linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid11800917\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}
{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain 
\s15\qc \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10710486 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\f1\fs28\insrsid10710486\charrsid11800917 Rusle2 Model Identifiers
\par }{\f1\fs24\insrsid10710486\charrsid1261184 200}{\f1\fs24\insrsid8401655 6}{\f1\fs24\insrsid10710486\charrsid1261184 -}{\f1\fs24\insrsid8401655 02}{\f1\fs24\insrsid10710486\charrsid1261184 -}{\f1\fs24\insrsid8401655 14}{
\f1\fs24\insrsid10710486\charrsid1261184 
\par }\pard \s15\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3562630 {\f1\fs24\insrsid10710486\charrsid1261184 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid10710486 {\f1\fs24\insrsid10710486\charrsid1261184 This document describes the identifiers (internal names) that Rusle2 uses for }{
\f1\fs24\ul\insrsid10710486\charrsid1261184 objects}{\f1\fs24\insrsid10710486\charrsid1261184  (named}{\f1\fs24\insrsid12327537 , typed}{\f1\fs24\insrsid10710486\charrsid1261184  collections)}{\f1\fs24\insrsid13401146\charrsid1261184 ,}{
\f1\fs24\insrsid10710486\charrsid1261184  }{\f1\fs24\ul\insrsid10710486\charrsid1261184 parameters}{\f1\fs24\insrsid10710486\charrsid1261184  (}{\f1\fs24\insrsid12327537 typed }{\f1\fs24\insrsid10710486\charrsid1261184 model variables)}{
\f1\fs24\insrsid13401146\charrsid1261184 ,}{\f1\fs24\insrsid12327537  }{\f1\fs24\ul\insrsid12327537\charrsid12327537 functions}{\f1\fs24\insrsid12327537 , }{\f1\fs24\insrsid13401146\charrsid1261184 and }{\f1\fs24\ul\insrsid13401146\charrsid1261184 
named values}{\f1\fs24\insrsid13401146\charrsid1261184  (stored in parameters)}{\f1\fs24\insrsid10710486\charrsid1261184 .
\par }{\f1\fs24\insrsid11800917\charrsid1261184 
\par }{\f1\fs24\insrsid9201890\charrsid1261184 
\par }{\b\f1\fs24\insrsid11800917\charrsid1261184 General Rules
\par }{\f1\fs24\insrsid10710486\charrsid1261184 
\par All identifiers break into components, composed of the characters used in C/C++ identifiers \endash  upper and lowercase letters, decimal digits, and underscore. Other characters can occur as delimiters}{\f1\fs24\insrsid1261184  or special prefixes}{
\f1\fs24\insrsid10710486\charrsid1261184 .
\par Identifiers are case-sensitive}{\f1\fs24\insrsid1261184  in Rusle2, although some functions may accept case variants for specific identifiers}{\f1\fs24\insrsid10710486\charrsid1261184 .
\par Identifiers must be globally unique \endash  that is, it is not legal to use the same name for an object type and a parameter}{\f1\fs24\insrsid12327537 , or for two parameters in different objects}{\f1\fs24\insrsid10710486\charrsid1261184 .
\par }{\f1\fs24\insrsid11800917\charrsid1261184 
\par }{\f1\fs24\insrsid9201890\charrsid1261184 
\par }{\b\f1\fs24\insrsid6971223\charrsid1261184 The Catalog}{\b\f1\fs24\insrsid11800917\charrsid1261184 
\par }{\f1\fs24\insrsid10710486\charrsid1261184 
\par }{\f1\fs24\insrsid6971223\charrsid1261184 The }{\f1\fs24\ul\insrsid6971223\charrsid1261184 catalog}{\f1\fs24\insrsid6971223\charrsid1261184 
 is an explicit listing of all identifiers contained in the RUSLE2 model, and their properties. It is stored in the two files "catalog.rusle.xml" and "catalog.shared.xml", which we
re once stored in the resource of the executable, and are now shipped independently in the RomeDLL SDK.
\par The catalog lists all object types, parameters, and named values.
\par Named values occur for list parameters.}{\f1\fs24\insrsid13401146\charrsid1261184  They are declared in the }{\f1\fs24\insrsid12082065 catalog in the }{\f1\fs24\insrsid12082065\charrsid12082065 <Choices}{\f1\fs24\insrsid12082065 
> element which follows the parameter declaration. These named values can actually be duplicated between different parameters, since they aren't identifiers. They may have different meaning when used as values for different parameters.}{
\f1\fs24\insrsid6971223\charrsid12082065 
\par }{\f1\fs24\insrsid6971223\charrsid1261184 The named values YES and NO are also used internally by Boolean parameters.
\par 
\par }{\f1\fs24\insrsid9201890\charrsid1261184 
\par }{\b\f1\fs24\insrsid6971223\charrsid1261184 Title}{\b\f1\fs24\insrsid8401655  String}{\b\f1\fs24\insrsid6971223\charrsid1261184 s
\par }{\f1\fs24\insrsid6971223 
\par }{\f1\fs24\insrsid8401655 See "}{\i\f1\fs24\insrsid8401655 Rulse2 Translation Titles.rtf}{\f1\fs24\insrsid8401655 " for a full description.}{\f1\fs24\insrsid8401655\charrsid8401655 
\par }{\f1\fs24\insrsid6971223\charrsid1261184 All strings that show in the user interface are }{\f1\fs24\insrsid6971223\charrsid8401655 translat}{\f1\fs24\insrsid8401655 ed}{\f1\fs24\insrsid6971223\charrsid8401655  }{
\f1\fs24\ul\insrsid6971223\charrsid8401655 title}{\f1\fs24\ul\insrsid8401655\charrsid8401655  string}{\f1\fs24\ul\insrsid6971223\charrsid8401655 s}{\f1\fs24\insrsid6971223\charrsid1261184 . These are mapped to internal identifers in }{
\f1\fs24\insrsid8401655 text}{\f1\fs24\insrsid6971223\charrsid1261184  files }{\f1\fs24\insrsid8401655 in the "Rusle2\\Text" subdirectory}{\f1\fs24\insrsid6971223\charrsid1261184 . The identif
iers are for internal use only, and are generally not displayed in the user interface.
\par You can find the identifier for a parameter from its visual control by right-clicking on the header for the visual. The last }{\f1\fs24\insrsid7294165 item }{\f1\fs24\insrsid6971223\charrsid1261184 in the context menu will be the interna
l name. If you select that menu item, it will copy the identifier to the clipboard.
\par }{\f1\fs24\insrsid11800917\charrsid1261184 
\par }{\f1\fs24\insrsid9201890\charrsid1261184 
\par }{\b\f1\fs24\insrsid10710486\charrsid1261184 Special Parameters
\par }{\f1\fs24\insrsid10710486\charrsid1261184 
\par }{\b\i\f1\fs24\insrsid10710486\charrsid1261184 PtrAttrName}{\b\f1\fs24\insrsid10710486\charrsid1261184 :IDX
\par }{\f1\fs24\insrsid10710486\charrsid1261184 Some remote parameters use an }{\f1\fs24\ul\insrsid10710486\charrsid1261184 index parameter}{\f1\fs24\insrsid10710486\charrsid1261184 
. Normally a remote parameter uses index 0 in the corresponding pointer parameter to find the object instance to point to. If the pointer parameter instance}{\f1\fs24\insrsid7294165  used by a remote}{\f1\fs24\insrsid10710486\charrsid1261184 
 has a corresponding parameter instance}{\f1\fs24\insrsid7294165  whose name has }{\f1\fs24\insrsid10710486\charrsid1261184 the suffix ":IDX", then the value of that parameter will be used as the index instead}{\f1\fs24\insrsid7294165  of 0}{
\f1\fs24\insrsid10710486\charrsid1261184 .}{\f1\fs24\insrsid10710486 
\par }{\f1\fs24\insrsid3881954 To elaborate, a remote parameter uses a pointer parameter (generally its dimension) to fetch a value from a target parameter in another object. It acts as a proxy for the target parameter. But
 there is still the choice of what index to use in the target parameter when getting or setting data. The default index is 0. But using an index parameter allows getting data from any index of the target parameter. We can't use the index of the remote par
ameter, because it is just the index to use to use for the pointer parameter.}{\f1\fs24\insrsid10710486 
\par }{\f1\fs24\insrsid3881954\charrsid1261184 
\par }{\b\i\f1\fs24\insrsid10710486\charrsid1261184 PtrAttrName}{\b\f1\fs24\insrsid10710486\charrsid1261184 :INTERNAL
\par }{\f1\fs24\insrsid15139887\charrsid1261184 Pointer parameters normally store names of external files stored in the database. }{\f1\fs24\insrsid10710486\charrsid1261184 Some }{\f1\fs24\insrsid15139887\charrsid1261184 
are allowed to point instead to internally stored objects. These internal objects are stored in an associated }{\f1\fs24\ul\insrsid15139887\charrsid1261184 internal subobject parameter}{\f1\fs24\insrsid10710486\charrsid1261184 . }{
\f1\fs24\insrsid15139887\charrsid1261184 This subobject }{\f1\fs24\insrsid10710486\charrsid1261184 parameter has the }{\f1\fs24\insrsid15139887\charrsid1261184 same name, but with the }{\f1\fs24\insrsid10710486\charrsid1261184 suffix ":}{
\f1\fs24\insrsid15139887\charrsid1261184 INTERNAL".}{\f1\fs24\insrsid10710486\charrsid1261184 
\par This behavior is described in detail in document "}{\i\f1\fs24\insrsid10710486\charrsid7294165 Rusle2 Internal Subobjects.rtf}{\f1\fs24\insrsid10710486\charrsid1261184 ".
\par 
\par }{\f1\fs24\insrsid9201890\charrsid1261184 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid13401146 {\b\f1\fs24\insrsid13401146\charrsid1261184 Long Parameter Names
\par }{\f1\fs24\insrsid13401146\charrsid1261184 
\par All parameters are identified by a simple name as described above. That identifier }{\f1\fs24\insrsid12728674 is sufficent}{\f1\fs24\insrsid13401146\charrsid1261184  to gain access to an instance of that parameter in }{\f1\fs24\insrsid12728674 an}{
\f1\fs24\insrsid13401146\charrsid1261184  object in which that parameter exists at runtime. However, objects in Rusle2 exist in a tree hierarchy, and to gain access to a parameter from a different object instance from the one in which it resides, it is }{
\f1\fs24\insrsid12728674 necessary}{\f1\fs24\insrsid13401146\charrsid1261184  to build up more complex strings which de}{\f1\fs24\insrsid12728674 scribe}{\f1\fs24\insrsid13401146\charrsid1261184 
 how to "get to" that parameter instance from the current object context.
\par 
\par When a pointer parameter points to another object, that pointer parameter can be used to gain access to parameter}{\f1\fs24\insrsid12327537 s in the other object}{\f1\fs24\insrsid13401146\charrsid1261184 . The compound string "#RD:}{
\i\f1\fs24\insrsid13401146\charrsid1261184 PtrName}{\f1\fs24\insrsid13401146\charrsid1261184 :}{\i\f1\fs24\insrsid12327537 Target}{\i\f1\fs24\insrsid13401146\charrsid1261184 Name}{\f1\fs24\insrsid13401146\charrsid1261184 
" is used to reference the parameter }{\i\f1\fs24\insrsid12327537 Target}{\i\f1\fs24\insrsid13401146\charrsid1261184 Name}{\f1\fs24\insrsid13401146\charrsid1261184  from the current object, in the object pointed to by parameter }{
\i\f1\fs24\insrsid13401146\charrsid1261184 PtrName}{\f1\fs24\insrsid13401146\charrsid1261184 . The prefix "#RD" stands for "remote down"}{\f1\fs24\insrsid12327537  \endash  if the }{\i\f1\fs24\insrsid12327537 PtrName}{\f1\fs24\insrsid12327537 
 is to a subobject pointer, then this points down into a subobject contained in the current object}{\f1\fs24\insrsid13401146\charrsid1261184 .
\par 
\par Example: in a Profile object, the CLIMATE_PTR parameter points to a Climate object instance. The parameter R_FACTOR exists in the Climate. To get the R_FACTOR value from within the Profile, you can use the string "#RD:CLIMATE_PTR:R_FACTOR".
\par }{\f1\fs24\insrsid5833490\charrsid1261184 
\par These compound itentifier strings can be concatenated}{\f1\fs24\insrsid12728674  (nested)}{\f1\fs24\insrsid5833490\charrsid1261184 . The final }{\i\f1\fs24\insrsid12327537 Target}{\i\f1\fs24\insrsid5833490\charrsid1261184 Name}{
\f1\fs24\insrsid5833490\charrsid1261184  part can itself be another compound identifier.}{\f1\fs24\insrsid12327537  Example }{\f1\fs24\insrsid12327537\charrsid1261184 "#RD:}{\i\f1\fs24\insrsid12327537\charrsid1261184 PtrName}{\i\f1\fs24\insrsid12327537 1}
{\f1\fs24\insrsid12327537\charrsid1261184 :}{\f1\fs24\insrsid12327537\charrsid12327537  }{\f1\fs24\insrsid12327537\charrsid1261184 #RD:}{\i\f1\fs24\insrsid12327537\charrsid1261184 PtrName}{\i\f1\fs24\insrsid12327537 2}{\f1\fs24\insrsid12327537 :}{
\i\f1\fs24\insrsid12327537 Target}{\i\f1\fs24\insrsid12327537\charrsid1261184 Name}{\f1\fs24\insrsid12327537\charrsid1261184 "}{\f1\fs24\insrsid12327537 
. Note that the "#RD:" prefix is required once for each pointer parameter. Only the last parameter doesn't use this prefix.}{\f1\fs24\insrsid5833490\charrsid1261184 
\par 
\par It is possible to choose the index }{\f1\fs24\insrsid7880159 in }{\f1\fs24\insrsid5833490\charrsid1261184 the pointer parameter }{\f1\fs24\insrsid7880159 to indirect }{\f1\fs24\insrsid5833490\charrsid1261184 through. These }{\f1\fs24\insrsid7880159 
indexed }{\f1\fs24\insrsid5833490\charrsid1261184 compound identifiers have form "#RD:}{\i\f1\fs24\insrsid5833490\charrsid1261184 PtrName}{\f1\fs24\insrsid5833490\charrsid1261184 [}{\i\f1\fs24\insrsid5833490\charrsid1261184 Index}{
\f1\fs24\insrsid5833490\charrsid1261184 ]:}{\i\f1\fs24\insrsid5833490\charrsid1261184 AttrName}{\f1\fs24\insrsid5833490\charrsid1261184 ". The }{\i\f1\fs24\insrsid5833490\charrsid1261184 Index}{\f1\fs24\insrsid5833490\charrsid1261184  string must be a }{
\f1\fs24\insrsid12275664\charrsid1261184 non-negative }{\f1\fs24\insrsid5833490\charrsid1261184 decimal integer, not an expression.}{\f1\fs24\insrsid2573873  This index is optional, with a default value of 0.}{\f1\fs24\insrsid5833490 
\par }{\f1\fs24\insrsid12327537 
\par The parameter }{\i\f1\fs24\insrsid12327537 PtrName}{\f1\fs24\insrsid12327537 
 used in these compound names can either be a [file] pointer parameter, which contains an array of pointers to named files, or a subobject pointer parameter, which contains an array of pointers to subobjects.}{\insrsid12327537\charrsid12327537 
\par }{\f1\fs24\insrsid8085238 
\par You can see how to build up these compound names in the user interface. The compound name build by this procedure will not be in the same format as above, but the process of building it is informative.
\par - Open a Rusle2 file (e.g. a Profile).
\par - Right click in the view background to get a context menu.
\par - Select menu item "Insert control\'85".
\par - When the dialog opens, select a pointer parameter (e.g. CLIMATE_PTR). The "Type" must show "CPtrAttr"}{\f1\fs24\insrsid3429757  or "CSubPtrAttr"}{\f1\fs24\insrsid8085238 .
\par - Select the button [Dn] to "drill" into the object through this pointer.
\par - Select a non-pointer parameter (e.g. R_EQUIV) or select another pointer parameter (e.g. EI_PTR) and continue to drill to another object.}{\f1\fs24\insrsid8085238\charrsid1261184 
\par }{\f1\fs24\insrsid13401146\charrsid1261184 
\par }{\f1\fs24\insrsid9201890\charrsid1261184 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid2191647 {\b\f1\fs24\insrsid9201890\charrsid1261184 Filenames}{\b\f1\fs24\insrsid2191647\charrsid1261184 
\par }{\f1\fs24\insrsid2191647\charrsid1261184 
\par }{\f1\fs24\insrsid8875266\charrsid1261184 Rusle2}{\f1\fs24\insrsid2191647\charrsid1261184  filename strings}{\f1\fs24\insrsid8875266\charrsid1261184  may contain any legal Win32 (NTFS) characters, in addition to }{\f1\fs24\insrsid2191647\charrsid1261184 
characters not legal in Win32 filenames.}{\f1\fs24\insrsid8875266\charrsid1261184  They are limited to 255 characters in length. Like Win32 filenames, they are case-insensitive.}{\f1\fs24\insrsid2191647\charrsid1261184 
\par }{\f1\fs24\insrsid3021802\charrsid1261184 
\par }{\f1\fs24\insrsid2191647\charrsid1261184 Rusle2 filenames have an object "table" prefix which is not displayed in the interface. For example, the filename for a PROFILE object will have }{\f1\fs24\insrsid9201890\charrsid1261184 the }{
\f1\fs24\insrsid2191647\charrsid1261184 prefix "profiles\\" prepended to it.}{\f1\fs24\insrsid9201890\charrsid1261184  Th}{\f1\fs24\insrsid8875266\charrsid1261184 is}{\f1\fs24\insrsid9201890\charrsid1261184  "table" prefix is the name of the database }{
\f1\fs24\insrsid8875266\charrsid1261184 table }{\f1\fs24\insrsid9201890\charrsid1261184 that this file type is stored under. This prefixed filename will be the value returned from the parameter, and the form that the parameter expects when a value is set.
}{\f1\fs24\insrsid2191647\charrsid1261184 
\par }{\f1\fs24\insrsid9201890\charrsid1261184 Some special values such as #ENTRY_NONE will not require the object table prefix.
\par }{\f1\fs24\insrsid3021802\charrsid1261184 
\par The name of a default file, such as "profiles\\default" will always suceed, even if the file isn't present in the database. If not found, it will be replaced by a default file created by the model.
\par 
\par }{\f1\fs24\insrsid8875266\charrsid1261184 Some functions may accept a special string that isn't the name of a file stored in the database:
\par -}{\f1\fs24\insrsid3021802\charrsid1261184  a string of the form "#XML:}{\i\f1\fs24\insrsid3021802\charrsid1261184 Win32Filename}{\f1\fs24\insrsid3021802\charrsid1261184 " will directly load or save a Rusle2 file stored in XML for
mat directly from the Win32 filesystem instead of the database.
\par }{\f1\fs24\insrsid8875266\charrsid1261184 -}{\f1\fs24\insrsid3021802\charrsid1261184  a Rusle2 XML file will be accepted directly instead of }{\f1\fs24\insrsid8875266\charrsid1261184 its}{\f1\fs24\insrsid3021802\charrsid1261184 
 filename. This string must begin with the the XML declaration, so the first part of the string must be "<}{\f1\fs24\insrsid8875266\charrsid1261184 ?}{\f1\fs24\insrsid3021802\charrsid1261184 xml".
\par }{\f1\fs24\insrsid8875266\charrsid1261184 -}{\f1\fs24\insrsid3021802\charrsid1261184  a filename string of the form "#SKEL:}{\i\f1\fs24\insrsid3021802\charrsid1261184 Win32Filename}{\f1\fs24\insrsid3021802\charrsid1261184 
" will directly load or save a Rusle2 }{\f1\fs24\insrsid8875266\charrsid1261184 management }{\f1\fs24\insrsid3021802\charrsid1261184 file stored in}{\f1\fs24\insrsid8875266\charrsid1261184  NRCS}{\f1\fs24\insrsid3021802\charrsid1261184 
 "management skeleton" }{\f1\fs24\insrsid8875266\charrsid1261184 XML }{\f1\fs24\insrsid3021802\charrsid1261184 format from the Win32 filesystem instead of a database.}{\f1\fs24\insrsid2191647\charrsid1261184 
\par }{\f1\fs24\insrsid16064700\charrsid1261184 
\par }{\f1\fs24\insrsid2191647\charrsid1261184 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid15935938 {\b\f1\fs24\insrsid15935938\charrsid1261184 Special Values
\par }{\f1\fs24\insrsid15935938\charrsid1261184 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid12009862 {\b\f1\fs24\insrsid12009862\charrsid1261184 #ENTRY_CUSTOM
\par }{\f1\fs24\insrsid12009862\charrsid1261184 This value can be }{\f1\fs24\insrsid4001133\charrsid1261184 return}{\f1\fs24\insrsid12009862\charrsid1261184 ed }{\f1\fs24\insrsid4001133\charrsid1261184 from}{\f1\fs24\insrsid12009862\charrsid1261184 
 some parameters to signify that the value has been changed from the default, but it is distinct from ENTRY_NONE. It will display title "(custom)" in a visual.}{\f1\fs24\insrsid4001133\charrsid1261184 
 It cannot be set directly by an end user or external programmer}{\f1\fs24\insrsid12388335\charrsid1261184 . It is stored in files.}{\f1\fs24\insrsid12009862\charrsid1261184 
\par 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid15935938 {\b\f1\fs24\insrsid15935938\charrsid1261184 #ENTRY_DEFAULT
\par }{\f1\fs24\insrsid15935938\charrsid1261184 
This value can be set in a parameter to set the default value for that specific parameter. In the case of a pointer parameter, the active user template may store a default file for that object type. If one is present, it will be used. If not, a gen
eric default value will be set.}{\f1\fs24\insrsid12275664\charrsid1261184  For all other parameter types the default value stored in the catalog will be used.}{\f1\fs24\insrsid15935938\charrsid1261184 
 This value can be set in all parameter types, but will never be returned from a parameter. It is not stored in files.
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid13446270 {\f1\fs24\insrsid13446270\charrsid1261184 
\par }{\b\f1\fs24\insrsid13446270\charrsid1261184 #ENTRY_INTERNAL
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid15935938 {\f1\fs24\insrsid13446270\charrsid1261184 
Some pointer parameters can point to a file stored internally. In that case this value can be stored at an index to point to that internal file. These files are stored in a subobject parameter whose name is the same as the pointer parameter, with suffix "
:INTERNAL" appended.}{\f1\fs24\insrsid12388335\charrsid1261184  This value can be both stored in and returned from parameters. It is stored in files.}{\f1\fs24\insrsid13446270\charrsid1261184 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid13446270 {\f1\fs24\insrsid13446270\charrsid1261184 This behavior is described in detail in document "}{\i\f1\fs24\insrsid13446270\charrsid14041217 
Rusle2 Internal Subobjects.rtf}{\f1\fs24\insrsid13446270\charrsid1261184 ".
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid15935938 {\f1\fs24\insrsid13446270\charrsid1261184 
\par }{\b\f1\fs24\insrsid15935938\charrsid1261184 #ENTRY_NONE
\par }{\f1\fs24\insrsid15935938\charrsid1261184 Some pointer parameters can hold }{\f1\fs24\ul\insrsid15935938\charrsid1261184 no}{\f1\fs24\insrsid15935938\charrsid1261184  value. This is ind
icated by storing the special string #ENTRY_NONE. It will display as "(none)" in the dropdown list or tree. This value can be both stored and retrieved from parameters, and is stored in files.
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid8401305 {\f1\fs24\insrsid8401305\charrsid1261184 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid13831412 {\b\f1\fs24\insrsid13831412\charrsid1261184 (empty string)
\par }{\f1\fs24\insrsid13831412\charrsid1261184 An empty string is used to signify that there i
s no value stored in a parameter that stores string values. An empty string is used instead for parameters which store an integer or date value. It cannot be set by an end user or external programmer. It is set internally by Rusle2 to signify that a value
 is not used at all, which causes the visual at that index to become disabled. It is stored in files.
\par 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid8401305 {\b\f1\fs24\insrsid8401305\charrsid1261184 NaN
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid15935938 {\f1\fs24\insrsid8401305\charrsid1261184 This value is used to signify that there is no value stored in a parameter that stores }{
\f1\fs24\insrsid13831412\charrsid1261184 integer values}{\f1\fs24\insrsid8401305\charrsid1261184 .}{\f1\fs24\insrsid13831412\charrsid1261184  An empty string is used instead for parameters which store a string value.}{
\f1\fs24\insrsid8401305\charrsid1261184  It cannot be set by an end user or external programmer. It is set internally by Rusle2 to signify that a value is not used at all, which causes the visual at that index to become disabled. It is stored in files.}{
\f1\fs24\insrsid15935938\charrsid1261184 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid8401305 {\f1\fs24\insrsid8401305\charrsid1261184 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid13831412 {\b\f1\fs24\insrsid13831412\charrsid1261184 False
\par }{\f1\fs24\insrsid13831412\charrsid1261184 This value may be set in Boolean parameters for FALSE. It is not returned by parameters or stored in files. As an exception, this string is case-insensitive when set.
\par 
\par }\pard \s15\ql \fi-180\li180\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin180\itap0\pararsid8401305 {\b\f1\fs24\insrsid8401305\charrsid1261184 No
\par }{\f1\fs24\insrsid8401305\charrsid1261184 This value is set in and returned by Boolean parameters for FALSE. It is stored in files. As an exception, this string is case-insensitive when set.
\par 
\par }{\b\f1\fs24\insrsid8401305\charrsid1261184 True
\par }{\f1\fs24\insrsid8401305\charrsid1261184 This value may be set in Boolean parameters for TRUE. It is not }{\f1\fs24\insrsid13831412\charrsid1261184 returned by parameters or }{\f1\fs24\insrsid8401305\charrsid1261184 
stored in files. As an exception, this string is case-insensitive when set.
\par 
\par }{\b\f1\fs24\insrsid8401305\charrsid1261184 Yes
\par }{\f1\fs24\insrsid8401305\charrsid1261184 This value is set in and returned by Boolean parameters for TRUE. It is stored in files. As an exception, this string is case-insensitive when set.
\par }{\fs24\insrsid8401305\charrsid1261184 
\par }}