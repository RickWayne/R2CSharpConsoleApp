{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman{\*\falt Times};}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial{\*\falt Helvetica};}{\f110\froman\fcharset238\fprq2 Times New Roman CE{\*\falt Times};}{\f111\froman\fcharset204\fprq2 Times New Roman Cyr{\*\falt Times};}
{\f113\froman\fcharset161\fprq2 Times New Roman Greek{\*\falt Times};}{\f114\froman\fcharset162\fprq2 Times New Roman Tur{\*\falt Times};}{\f115\froman\fcharset177\fprq2 Times New Roman (Hebrew){\*\falt Times};}
{\f116\froman\fcharset178\fprq2 Times New Roman (Arabic){\*\falt Times};}{\f117\froman\fcharset186\fprq2 Times New Roman Baltic{\*\falt Times};}{\f118\froman\fcharset163\fprq2 Times New Roman (Vietnamese){\*\falt Times};}
{\f120\fswiss\fcharset238\fprq2 Arial CE{\*\falt Helvetica};}{\f121\fswiss\fcharset204\fprq2 Arial Cyr{\*\falt Helvetica};}{\f123\fswiss\fcharset161\fprq2 Arial Greek{\*\falt Helvetica};}{\f124\fswiss\fcharset162\fprq2 Arial Tur{\*\falt Helvetica};}
{\f125\fswiss\fcharset177\fprq2 Arial (Hebrew){\*\falt Helvetica};}{\f126\fswiss\fcharset178\fprq2 Arial (Arabic){\*\falt Helvetica};}{\f127\fswiss\fcharset186\fprq2 Arial Baltic{\*\falt Helvetica};}
{\f128\fswiss\fcharset163\fprq2 Arial (Vietnamese){\*\falt Helvetica};}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}}{\*\rsidtbl \rsid202695\rsid462032\rsid478476\rsid733319\rsid854589\rsid1441848
\rsid2501990\rsid2842412\rsid4217757\rsid4806388\rsid5395379\rsid6175311\rsid6841105\rsid8520786\rsid9454101\rsid9512679\rsid9650920\rsid10292068\rsid10319698\rsid10692878\rsid11350403\rsid11690172\rsid12388675\rsid13589691\rsid13836765\rsid14046567
\rsid14829601\rsid15752640\rsid15816124}{\*\generator Microsoft Word 10.0.6754;}{\info{\author James P. Lyon}{\operator James P. Lyon}{\creatim\yr2005\mo6\dy17\hr12\min14}{\revtim\yr2005\mo7\dy1\hr18\min9}{\version15}{\edmins228}{\nofpages3}
{\nofwords1800}{\nofchars10261}{\*\company University of Tennessee}{\nofcharsws12037}{\vern16391}}\margl720\margr720 \widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale125\nolnhtadjtbl\rsidroot11690172 \fet0\sectd \linex0\sectdefaultcl\sectrsid10292068\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \qc \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid10292068 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\f1\fs22\insrsid10692878 Rusle2 internal subobjects
\par }{\f1\fs20\insrsid10692878\charrsid10692878 2005-0}{\f1\fs20\insrsid478476 7-01}{\f1\fs20\insrsid10692878\charrsid10692878 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid10692878\charrsid10692878 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid14829601 {\b\f1\fs20\insrsid14829601 Overview}{\b\f1\fs20\insrsid14829601\charrsid11690172 
\par }{\f1\fs20\insrsid14829601 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid14829601 The parameters in Rusle2 which store the names of files}{\f1\fs20\insrsid10692878  }{\f1\fs20\insrsid14829601 are}{\f1\fs20\insrsid10692878  now capable of storing }{
\f1\fs20\insrsid14829601 file }{\f1\fs20\insrsid10692878 objects internally, }{\f1\fs20\insrsid14829601 for each}{\f1\fs20\insrsid10692878  index.}{\f1\fs20\insrsid11690172 
 This means that you can "move" a file into the object in which the pointer attr resides. This allows saving associated file data inside a single Rusle2 object.
\par 
\par This document will use the pointer attr EI_PTR in object CLIMATE for all examples. Actually using this}{\f1\fs20\insrsid10292068  specific parameter}{\f1\fs20\insrsid11690172 
 requires that a change has been made to the Rusle2 model (catalog), which may not have been done in the version of Rusle2 you are using.}{\f1\fs20\insrsid10292068 
 This feature is not available for all pointer parameters, only ones for which this ability has been specified in the Rusle2 model.}{\f1\fs20\insrsid10692878 
\par }{\f1\fs20\insrsid11690172 
\par }{\b\f1\fs20\insrsid11690172\charrsid11690172 End users
\par }{\f1\fs20\insrsid14829601 
\par }{\f1\fs20\insrsid11690172 To switch to an internal object, click the dropdown for the }{\f1\fs20\insrsid2842412 pointer}{\f1\fs20\insrsid11690172 
 attr. There should be a menu item named "(internal)" either first or second in the tree, or one with a similar name. This name can be re
named for different parameters, so it may not be exactly this string. This menu item won't have a folder or file icon next to it. Just select this menu item.
\par 
\par When the menu item "(internal)" is selected, you can right click on the cell to get a context menu with two additional menu items enabled \endash  "Load from file\'85" and "Save to file\'85
". These allow directly loading this internal object from a file in the database, or saving its data out as a file.
\par 
\par To switch back to a normal file, just click on the dropdown and select a named file. The data that you previously entered in the internal object is still there. If you switch back to the internal object, it will still be there.}{\f1\fs20\insrsid2501990 
 In order to overwrite its contents, you will have to reload it from a file.
\par 
\par When}{\f1\fs20\insrsid10292068  a poin
ter parameter has multiple rows, each row has its own internal object. Changes made to the internal object in one row will not affect the other rows. To copy data from one row to another, you will have to save the object out as a named file, and load it b
ack in for the rows you want to copy to.}{\f1\fs20\insrsid11690172 
\par }{\f1\fs20\insrsid9512679 
\par If you do not see the "(internal)" menu item in the drop tree for a parameter, that means either this option isn't available for that parameter, you don't have access to use that option, or you are using an older ve
rsion of Rusle2 which doesn't support this behavior. If the problem is an access file, you will have to switch to an access file which allows using the internal object for that specific parameter.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid1441848 {\f1\fs20\insrsid1441848 
\par It is possible to}{\f1\fs20\insrsid478476  select an in}{\f1\fs20\insrsid1441848 ternal object, drill 
into that object to show its view, and then change the pointer parameter to use a named file. The view for the internal object will remain open, but any changes made to it will not affect calculation. This is the same behavior as if the user had first sel
ected one named file}{\f1\fs20\insrsid478476 , drilled into it}{\f1\fs20\insrsid1441848 , and then selected another one.
\par 
\par When a view is opened for an internal object, it will have a title like: }{\f1\fs20\insrsid1441848\charrsid1441848 "Climate: Erosivity(EI_PTR:INTERNAL[1]) of }{\i\f1\fs20\insrsid1441848 climate-f}{\i\f1\fs20\insrsid1441848\charrsid1441848 ilename}{
\f1\fs20\insrsid1441848\charrsid1441848 ". If you drill into a normal external Erosivity file, it will show }{\f1\fs20\insrsid1441848 the }{\f1\fs20\insrsid1441848\charrsid1441848 title "Erosivity: }{\i\f1\fs20\insrsid1441848\charrsid1441848 
erosivity-filename}{\f1\fs20\insrsid1441848\charrsid1441848 ".}{\f1\fs20\insrsid1441848  The filename shown in the view title of an internal object is the name of the file it is contained within, not the type of object it is.
\par }{\f1\fs20\insrsid15752640 
\par You may add visuals 
for parameters stored in an internal object in the same that way you would for redirection through any pointer parameter. The parameter EI_PTR in Climate points to the Erosivity object to use. The Erosivity object contains the parameter EI_VALUE. To add a
 visual for this parameter in the Climate:
\par 1) Use menu item "Insert control\'85" in the view to add a new visual.
\par 2) Select item "Standard EI Distribution (EI_PTR)" in the list.
\par 3) Click button [Dn] to "drill' into the Erosivity object.
\par 4) Select item "Daily EI [ Days in year, 1 ] (EI_DAILY)" in the list.
\par 5) Select the control type to insert \endash  use a Table in this case.
\par 6) Click the [OK] button.
\par 7) Use menu item "Header size" to select the number of rows to display in the table.
\par This visual will now display the data from the Erosivity object pointed to by EI_PTR, independently of whether it is an internal object or an external one (named file).}{\f1\fs20\insrsid15752640\charrsid1441848 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid9512679 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid478476 {\b\f1\fs20\insrsid478476 Access Control}{\f1\fs20\insrsid478476 
\par }{\f1\fs20\insrsid12388675 
\par }{\f1\fs20\insrsid478476 The Rusle2 access control model has been extended to handle internal parameters in the following ways.
\par 
\par You may change the access level of the individual internal parameters (like EI_PTR:INTERNAL) in order to hide their existence in most circumstances. This can be done for individual parameters.
 Older access files will not have access to these new INTERNAL parameters, so to a user with one of these access files, Rusle2 will behave as if }{\f1\fs20\insrsid12388675 internal objects}{\f1\fs20\insrsid478476  }{\f1\fs20\insrsid12388675 are}{
\f1\fs20\insrsid478476 n't present.
\par 
\par If the user has HIDE access for the internal parameter, the title }{\f1\fs20\insrsid12388675 "(internal)}{\f1\fs20\insrsid478476 " will still appear in a cell for which it has been }{\f1\fs20\insrsid12388675 previously }{\f1\fs20\insrsid478476 selected
. This is necessary to avoid showing a blank cell. The user will also be able to select another value. If they do so, they won't be able to change back to the internal object. It's data will still be present, but they won't be able to see it or select it.
 No drill icon will show in the cell}{\f1\fs20\insrsid12388675 , and the menu item "(internal)" won't show in the droptree.}{\f1\fs20\insrsid478476 
\par 
\par If the user has SEE or EDIT access for the internal parameter, they may: 1)}{\f1\fs20\insrsid5395379  }{\f1\fs20\insrsid12388675 Create a new visual for the internal parameter 2) Drill into the internal subobject 3) 
Change to and from the internal subobject 4) Select the internal object in the droptree. }{\f1\fs20\insrsid478476 The SEE and EDIT access levels are treated the same as far as the }{\f1\fs20\insrsid12388675 "(internal)}{\f1\fs20\insrsid478476 " va
lue is concerned.
\par 
\par }{\b\f1\fs20\insrsid478476 External Developers}{\f1\fs20\insrsid478476 
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid14829601 The internal object is selected }{\f1\fs20\insrsid8520786 in an attr "}{\i\f1\fs20\insrsid8520786\charrsid8520786 PtrAttr}{\f1\fs20\insrsid8520786 "}{
\f1\fs20\insrsid8520786\charrsid13589691  }{\f1\fs20\insrsid13589691 by }{\f1\fs20\insrsid14829601\charrsid13589691 using}{\f1\fs20\insrsid14829601  string "#ENTRY_INTERNAL"}{\f1\fs20\insrsid8520786 . This causes the data to be taken from an }{
\f1\fs20\insrsid2842412 associated}{\f1\fs20\insrsid8520786  attr named "}{\i\f1\fs20\insrsid8520786 PtrAttr}{\f1\fs20\insrsid8520786 
:INTERNAL", which is automatically created by the model. This "internal" attribute has the same size and dimensions as the original attr "}{\i\f1\fs20\insrsid8520786 PtrAttr}{\f1\fs20\insrsid8520786 
". It will not generally have any visuals, and you won't be able to add a new visual for it}{\f1\fs20\insrsid13589691  directly, although you will be able to add visuals for its contents, as described in the "End Users" section}{\f1\fs20\insrsid8520786 .

\par }{\f1\fs20\insrsid6841105 
\par This :INTERNAL attribute may be accessed directly by name, separately from the original pointer attribute it is associated with. So you may }{\f1\fs20\insrsid13589691 get}{\f1\fs20\insrsid6841105  (or set) the internal object}{\f1\fs20\insrsid13589691 's}
{\f1\fs20\insrsid6841105  data even when it isn't selected in the }{\f1\fs20\insrsid2842412 corresponding}{\f1\fs20\insrsid6841105  pointer attribute.
\par 
\par }{\f1\fs20\insrsid8520786 The string "#ENTRY_INTERNAL" can only be set in a parameter which the model allows this for. This is }{\f1\fs20\insrsid6841105 specified}{\f1\fs20\insrsid8520786 
 in the catalog XML files using flag ACF_ALLOW_INTERNAL. The associated }{\f1\fs20\insrsid6841105 :}{\f1\fs20\insrsid8520786 INTERNAL parameter will not exist explicitly in the catalog file.
\par 
\par The string "#ENTRY_INTERNAL" can only be set in a parameter for which the current user has access for the associated parameter "}{\i\f1\fs20\insrsid8520786 PtrAttr}{\f1\fs20\insrsid8520786 :INTERNAL". }{\f1\fs20\insrsid6841105 
Access for this parameter will not be present in older access files, even if the user has access to "}{\i\f1\fs20\insrsid6841105 PtrAttr}{\f1\fs20\insrsid6841105 ".}{\f1\fs20\insrsid15816124  External APIs, such as the Rome }{\f1\fs20\insrsid13589691 
(DLL) }{\f1\fs20\insrsid15816124 API and }{\f1\fs20\insrsid13589691 IRome (OLE Automation) API are restricted by the current access level selected.}{\f1\fs20\insrsid6841105 
\par 
\par The string "#ENTRY_INTERNAL" has a default translation text of "(internal)". It is possible to override this string for each parameter, so for example the parameter EI_PTR could have a translation "(internal EI)" added to key "EI_PTR:#ENTRY_INTERNAL"}{
\f1\fs20\insrsid13589691  in the text file "rusle.txt"}{\f1\fs20\insrsid6841105 .}{\f1\fs20\insrsid14829601 
\par 
\par }{\b\f1\fs20\insrsid9512679\charrsid9512679 Modelers}{\b\f1\fs20\insrsid4217757  and Internal Developers}{\b\f1\fs20\insrsid9512679\charrsid9512679 
\par }{\f1\fs20\insrsid9512679 
\par }{\f1\fs20\insrsid10692878 To }{\f1\fs20\insrsid6841105 enable}{\f1\fs20\insrsid10692878  this}{\f1\fs20\insrsid4217757  feature}{\f1\fs20\insrsid10692878 :
\par }{\f1\fs20\insrsid11350403 - make sure symbol USE_ENTRY_INTERNAL is defined in "imoses.h".
\par }\pard \ql \fi-180\li180\ri0\nowidctlpar\faauto\rin0\lin180\itap0\pararsid4217757 {\f1\fs20\insrsid10692878 - Add the flag ACF_ALLOW_INTERNAL to any CPtrAttr definition in the catalog XML file. This will automatically generate a new parameter "}{
\i\f1\fs20\insrsid10692878 PtrAttrName}{\f1\fs20\insrsid10692878 :INTERNAL\'94. It will have the same dimensions as the original CPtrAttr. It will only hold the object type that the CPtrAttr holds.
\par - Make sure there is a string translation for "#ENTRY_INTERNAL". You may override this }{\f1\fs20\insrsid11350403 for individual parameters}{\f1\fs20\insrsid10692878  }{\f1\fs20\insrsid11350403 using key }{\f1\fs20\insrsid10692878 "}{
\i\f1\fs20\insrsid10692878 PtrAttrName}{\f1\fs20\insrsid10692878 :#ENTRY_INTERNAL\'94.
\par - Make sure the user access file has the parameter "}{\i\f1\fs20\insrsid10692878 PtrAttrName}{\f1\fs20\insrsid10692878 :INTERNAL\'94
 in it. If you just added this parameter (by adding the catalog flag), you will have to regenerate the access file to do this. If the user doesn\rquote t have access to this parameter, the original CPtrAttr won\rquote t show the menu item \'93(internal)
\'94 in its drop tree.
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid10692878 
\par }{\f1\fs20\insrsid6841105 E}{\f1\fs20\insrsid10692878 xample}{\f1\fs20\insrsid6841105 :
\par T}{\f1\fs20\insrsid10692878 o allow using climates with internal EI objects, add the flag ACF_ALLOW_INTERNAL to param}{\f1\fs20\insrsid854589 eter}{\f1\fs20\insrsid10692878  EI_PTR, and regenerate the R2 access. That\rquote s all that\rquote s required.

\par 
\par It }{\f1\fs20\insrsid6841105 is }{\f1\fs20\insrsid10692878 legal for \'93#ENTRY_INTERNAL\'94 to be the default value for a CPtrAttr}{\f1\fs20\insrsid6841105  in the catalog}{\f1\fs20\insrsid10692878 .
\par 
\par In the science code, to switch to an internal }{\f1\fs20\insrsid4217757 object}{\f1\fs20\insrsid10692878 , just set the string \'93#ENTRY_INTERNAL\'94 using SetStr() at the index.
\par There is a macro ENTRY_INTERNAL which avoids the need for double quotes, just like for all the other ENTRY strings.
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0\pararsid202695 {\f1\fs20\insrsid202695 Because we don\rquote t have a unique string identifying subobjects, if you do a GetStr() on a CPtrAttr, it can return the string \'93#ENTRY_INTERNAL\'94
, which the science code would have to know how to handle, since the file system won\rquote t. I}{\f1\fs20\insrsid9650920 t}{\f1\fs20\insrsid202695  }{\f1\fs20\insrsid9650920 was decided}{\f1\fs20\insrsid202695  not to do this }{\f1\fs20\insrsid10319698 
initially}{\f1\fs20\insrsid202695 , because the logic gets very complicated. This is only important if you do a GetStr(). As long as you just use GetPtr(), your code doesn\rquote t need to know where the object is being stored.
\par }{\f1\fs20\insrsid4806388 
\par If you have a custom validation function for a CPtrAttr, it must know how to handle the value "#ENTRY_INTERNAL". If not, it may prevent that value from being entered in that parameter.
\par }{\f1\fs20\insrsid733319 
\par Adding a visual for an internal object is described above in the "End Users" section. There is currently no way to add a visual that }{\f1\fs20\ul\insrsid733319 directly}{\f1\fs20\insrsid733319 
 displays the contents of an internal object, independently of whether or not the associated pointer attr is pointing to it. The reason is that we don't create a visual pref for the internal parameter in the hard-coded (model) user template. As a c
onsequence, it doesn't show up in the list of parameters that you may insert a control for. This could be changed if necessary.}{\f1\fs20\insrsid733319\charrsid733319 
\par }{\f1\fs20\insrsid202695 
\par }{\b\f1\fs20\insrsid202695\charrsid202695 Implementation}{\b\f1\fs20\insrsid202695  Details}{\b\f1\fs20\insrsid202695\charrsid202695 
\par }{\f1\fs20\insrsid202695 
\par The code implements a more general mechanism - you can set the name of }{\f1\fs20\ul\insrsid202695 any}{\f1\fs20\insrsid202695  CSubPtrAttr in any CPtrAttr. You are allowed to use RemoteNames. It is up to the }{\f1\fs20\insrsid733319 programmer}{
\f1\fs20\insrsid202695  to set a good relative path to the target subobject parameter. You probably shouldn\rquote t do this in parameters which are visible to the end user - there isn\rquote t any mechanism yet for handling trans
lations of these in the drop}{\f1\fs20\insrsid11350403  }{\f1\fs20\insrsid202695 tree. }{\f1\fs20\insrsid733319 T}{\f1\fs20\insrsid202695 hat could added if necessary.
\par 
\par This code can be compiled out by undefining symbol USE_ENTRY_INTERNAL in \'93imoses.h\'94. It will also be invisible to users of the program who don\rquote t have a new access file which allows them to see the new INTERNAL attrs.
\par 
\par Function CSubPtrAttr::LoadFromFile() has been renamed to FileLoad(), and made virtual. This replaces a previously commented out version of FileLoad(), which is now gone. There are now several overrides of FileLoad(), which allo
w handling remote attrs correctly as well. The corresponding [non-virtual] function FileSave() has been move to class CAttr, and now handles cases of CAttr, CRemoteAttr, CPtrAttr, CSubPtrAttr correctly.
\par 
\par }\pard \ql \li0\ri0\nowidctlpar\faauto\rin0\lin0\itap0 {\f1\fs20\insrsid13836765 There is}{\f1\fs20\insrsid10692878  a new function C[Sub]PtrAttr::FindPtr() which returns NULL if the pointer isn\rquote t set.}{\f1\fs20\insrsid13836765  }{
\f1\fs20\insrsid10692878 This doesn\rquote t force creation of a subobject that isn\rquote t present, and it doesn\rquote t force loading of a file that hasn\rquote t been loaded yet.
\par Note that the ptrs[] array will actually contain a NULL }{\f1\fs20\insrsid2842412 pointer}{\f1\fs20\insrsid10692878 
 entry for a CPtrAttr whose entry is ENTRY_INTERNAL or a name of a CSubPtrAttr. That is because CPtrAttrs only store CFileObj* pointers, even though they are cast to CSubObj* pointers. But then you aren\rquote t supposed to use the raw ptr
[] array directly }{\f1\fs20\insrsid2842412 anyway}{\f1\fs20\insrsid10692878 !
\par 
\par }{\b\f1\fs20\insrsid202695\charrsid202695 Future Development
\par }{\f1\fs20\insrsid10692878 
\par As a consequence of all of this, I am coming around to }{\f1\fs20\insrsid13836765 the }{\f1\fs20\insrsid10692878 way of thinking that CPtrAttr and CSubPtrAttr are close to being the same thing.}{\f1\fs20\insrsid13836765  }{\f1\fs20\insrsid10692878 I don
\rquote t }{\f1\fs20\insrsid2842412 foresee}{\f1\fs20\insrsid10692878  doing much to unify them }{\f1\fs20\insrsid13836765 in the }{\f1\fs20\insrsid10692878 short term, for lack of time.
\par 
\par One step towards this, if it }{\f1\fs20\insrsid6175311 i}{\f1\fs20\insrsid10692878 s useful, would be to store all subobjects in the }{\f1\fs20\insrsid202695 file system}{\f1\fs20\insrsid10692878  class along with open files.}{
\f1\fs20\insrsid202695\charrsid202695  }{\f1\fs20\insrsid202695 This would generalize the way }{\f1\fs20\insrsid6175311 file objects are}{\f1\fs20\insrsid202695  currently share}{\f1\fs20\insrsid6175311 d}{\f1\fs20\insrsid202695  internally by creating 
\'93internal\'94 ones which aren't visible to the user. }{\f1\fs20\insrsid10692878 This would allow giving }{\f1\fs20\insrsid6175311 sub}{\f1\fs20\insrsid202695 objects }{\f1\fs20\insrsid10692878 unique names, and the same subobject }{
\f1\fs20\insrsid202695 could then }{\f1\fs20\insrsid10692878 be shared by multiple indexes of a CSubPtrAttr, or among several }{\f1\fs20\insrsid202695 attr}{\f1\fs20\insrsid6175311 ibute}{\f1\fs20\insrsid202695 s}{\f1\fs20\insrsid10692878 .}{
\f1\fs20\insrsid202695  They could also be used interchangeably with files in a more flexible manner.}{\f1\fs20\insrsid10692878 
\par }}